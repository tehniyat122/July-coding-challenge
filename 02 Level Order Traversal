Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /*
        function Name: levelOrderBottom
        Args: Root node
        Return : vector of vector(ints)
        Description:
        1.Insert the element in the queue
        2.while the q not empty, find the size
        3.create an another loop,run till the size of the loop.
            i)pop the element from the queue.insert the element into the vector.if the element has
            left or right node. insert them into queue.
        
            
        
    */
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<TreeNode*> que;
        vector<vector<int>> result_vec;
        if(root != NULL)
        {
            que.push(root);
        }
        
        while(!que.empty())
        {
            int queue_size = que.size();
            vector<int> same_level_vec;
            while(queue_size--)
            {
               TreeNode* popped_value = que.front();
               que.pop();
               same_level_vec.push_back(popped_value->val);
               if(popped_value->left != NULL)
               {
                    que.push(popped_value->left);
               }
               if  (popped_value->right != NULL)
               {
                    que.push(popped_value->right);
               }
            }
            result_vec.push_back(same_level_vec);
        }
        reverse(result_vec.begin(),result_vec.end());
        return result_vec;
    }
};
