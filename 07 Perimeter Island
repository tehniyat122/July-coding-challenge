class Solution {
public:
       void calculate_perimeter(int row,int col,vector<vector<int>> grid,int & peri_sum)
    {
        /*
        Name: calculate_perimeter 
        Args:row, col, grid, perimeter_sum
        return: calculate_perimeter
        description:
            0.  check row == 0 or grid[row-1][col]==0  Add the perimeter value
            1.  check col == 0 or grid[row][col-1]==0 Add the perimeter value
            2.  check row == grid.size()-1 or grid[row+1][col]==0 Add the perimeter value
            3.  check col == grid[0].size()-1 or grid[row][col+1]==0 Add the perimeter value
        */
        if(row == 0 || grid[row-1][col] == 0) { peri_sum++; }
        if(col == 0 || grid[row][col-1] == 0) { peri_sum++;}
        if(row == grid.size()-1 || grid[row+1][col]== 0) { peri_sum++;}
        if(col == grid[0].size()-1 || grid[row][col+1] == 0) { peri_sum++;}
  
    }
     bool is_safe(int row, int col, vector<vector<int>> grid, vector<vector<int>> &visited)
    {
        /*
        Name: is_safe
        Args: row, col, grid, visited
        return: bool
        Description:
            0. Return false if it doesn't satisfy the boundary conditions like if row < 0 col <  ||
               row >= N || col >= M || visited[i][j] == 1 || grid[i]j]= 0
            1. otherwisw true
        
        */
         
        if(row < 0 || col< 0 || col >= grid[0].size() || row >=  grid.size() || visited[row][col] == 1 ||
           grid[row][col] == 0)
        {
           return false; 
        }
        //cout<<"row: "<< row << "col: " << col << "Visited" << visited[row][col]<<endl;
        return true;
    } 
    
    void find_perimeter(int row, int col, vector<vector<int>> grid, vector<vector<int>> &visited, int & peri_sum)
    {
        /*
            Name: find_perimeter 
            Args:row, col, grid, visited, perimeter_sum
            return: perimeter_sum
            description:
            0. mark the grid[i][j]value as visited 
            1. calculate perimeter if top/bottom/left/right are surrounded by water.
            2. call is_safe()
            3. recursively call the top,bottom ,left,right until are 1's are visited
        */
        
       
        if(visited[row][col] != 1)
        {
            calculate_perimeter(row, col, grid, peri_sum);
        }
        visited[row][col] = 1;
        //cout<<"row: "<<row<<"col: "<<col<<"Perimeter sum: "<<peri_sum<<endl;
        if(is_safe(row, col-1, grid, visited) == true)
        {
            find_perimeter(row, col-1, grid, visited, peri_sum);   
        }
         if(is_safe(row, col+1, grid, visited) == true)
        {
             find_perimeter(row, col+1, grid, visited, peri_sum);
        }
        
         if(is_safe(row+1, col, grid, visited) == true)
        {
            find_perimeter(row+1, col, grid, visited, peri_sum);
        }
         if(is_safe(row-1, col, grid, visited) == true)
        {
            find_perimeter(row-1, col, grid, visited, peri_sum);
        }
       
        
       
       
        return;
       
    }   
       
    int islandPerimeter(vector<vector<int>>& grid) {
        /*
        Name: islandPerimeter
        Args: vector(vector)
        return: perimeter value.
        description:
            0. initialise visited array to 0.
            1. loop over the grid till cell with 1 is found.Pass the row,col,grid,visited array,sum to findperimeter

        */
        int sum = 0;
        vector<vector<int>> visited(grid.size(),vector<int>(grid[0].size(),0));
        for(int i=0; i<grid.size(); i++)
        {
            for(int j=0; j<grid[0].size(); j++)
            {
                if(grid[i][j] == 1)
                {
                  find_perimeter(i,j,grid,visited,sum); 
                 
                }
            }
        }
        return sum;
      }

};


****************************************************************************************************************************


class Solution {
public:
       void calculate_perimeter(int row,int col,vector<vector<int>> grid,int & peri_sum)
    {
        /*
        Name: calculate_perimeter 
        Args:row, col, grid, perimeter_sum
        return: calculate_perimeter
        description:
            0.  check row == 0 or grid[row-1][col]==0  Add the perimeter value
            1.  check col == 0 or grid[row][col-1]==0 Add the perimeter value
            2.  check row == grid.size()-1 or grid[row+1][col]==0 Add the perimeter value
            3.  check col == grid[0].size()-1 or grid[row][col+1]==0 Add the perimeter value
        */
        if(row == 0 || grid[row-1][col] == 0) { peri_sum++; }
        if(col == 0 || grid[row][col-1] == 0) { peri_sum++;}
        if(row == grid.size()-1 || grid[row+1][col]== 0) { peri_sum++;}
        if(col == grid[0].size()-1 || grid[row][col+1] == 0) { peri_sum++;} 

  
    }
    
    
   
    int islandPerimeter(vector<vector<int>>& grid) {
        /*
        Name: islandPerimeter
        Args: vector(vector)
        return: perimeter value.
        description:
            0. initialise visited array to 0.
            1. loop over the grid till cell with 1 is found.Pass the row,col,grid,visited array,sum to findperimeter

        */
        int peri_sum = 0;
        vector<vector<int>> visited(grid.size(),vector<int>(grid[0].size(),0));
        for(int row=0; row<grid.size(); row++)
        {
            for(int col=0; col<grid[0].size(); col++)
            {
                if(grid[row][col] == 1)
                {
                    
                }
            }
        }
        return sum;
      }
    
 
    
   
    
        
        
    
};
