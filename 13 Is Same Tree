Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /*
    Name: isSameTree
    Args: Treenode p, q
    return:
    True: if two nodes are equal
    False: if two nodes are not equal
    Description:
    //using Preorder traversal
        1.  if p == NULL and q == NULL return 1
        2.  if p != NULL and q != NULL check p->val != q->val return false
        3.  recursively call p->left , q->left and p->right, q-> right
        4. Else return 0
        
        
    */
    bool isSameTree(TreeNode* p, TreeNode* q) {
      if(p == NULL && q == NULL)
      {
          return true;
      }
      else if(p != NULL && q != NULL)
      {
          if(p->val != q->val)
          {
              return false;
          }
          return isSameTree( p->left, q->left) && isSameTree( p->right, q->right);
      }
      return false;

    }
};
